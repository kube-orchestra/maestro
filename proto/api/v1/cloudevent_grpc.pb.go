// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/cloudevent.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudEventService_SendCloudEvent_FullMethodName = "/v1.CloudEventService/SendCloudEvent"
	CloudEventService_Subscribe_FullMethodName      = "/v1.CloudEventService/Subscribe"
	CloudEventService_Unsubscribe_FullMethodName    = "/v1.CloudEventService/Unsubscribe"
)

// CloudEventServiceClient is the client API for CloudEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudEventServiceClient interface {
	SendCloudEvent(ctx context.Context, in *CloudEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Subscribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (CloudEventService_SubscribeClient, error)
	Unsubscribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type cloudEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudEventServiceClient(cc grpc.ClientConnInterface) CloudEventServiceClient {
	return &cloudEventServiceClient{cc}
}

func (c *cloudEventServiceClient) SendCloudEvent(ctx context.Context, in *CloudEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudEventService_SendCloudEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudEventServiceClient) Subscribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (CloudEventService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudEventService_ServiceDesc.Streams[0], CloudEventService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudEventServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudEventService_SubscribeClient interface {
	Recv() (*CloudEventMessage, error)
	grpc.ClientStream
}

type cloudEventServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *cloudEventServiceSubscribeClient) Recv() (*CloudEventMessage, error) {
	m := new(CloudEventMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudEventServiceClient) Unsubscribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CloudEventService_Unsubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudEventServiceServer is the server API for CloudEventService service.
// All implementations must embed UnimplementedCloudEventServiceServer
// for forward compatibility
type CloudEventServiceServer interface {
	SendCloudEvent(context.Context, *CloudEventMessage) (*emptypb.Empty, error)
	Subscribe(*Request, CloudEventService_SubscribeServer) error
	Unsubscribe(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedCloudEventServiceServer()
}

// UnimplementedCloudEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudEventServiceServer struct {
}

func (UnimplementedCloudEventServiceServer) SendCloudEvent(context.Context, *CloudEventMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCloudEvent not implemented")
}
func (UnimplementedCloudEventServiceServer) Subscribe(*Request, CloudEventService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCloudEventServiceServer) Unsubscribe(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedCloudEventServiceServer) mustEmbedUnimplementedCloudEventServiceServer() {}

// UnsafeCloudEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudEventServiceServer will
// result in compilation errors.
type UnsafeCloudEventServiceServer interface {
	mustEmbedUnimplementedCloudEventServiceServer()
}

func RegisterCloudEventServiceServer(s grpc.ServiceRegistrar, srv CloudEventServiceServer) {
	s.RegisterService(&CloudEventService_ServiceDesc, srv)
}

func _CloudEventService_SendCloudEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudEventServiceServer).SendCloudEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudEventService_SendCloudEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudEventServiceServer).SendCloudEvent(ctx, req.(*CloudEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudEventService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudEventServiceServer).Subscribe(m, &cloudEventServiceSubscribeServer{stream})
}

type CloudEventService_SubscribeServer interface {
	Send(*CloudEventMessage) error
	grpc.ServerStream
}

type cloudEventServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *cloudEventServiceSubscribeServer) Send(m *CloudEventMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudEventService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudEventServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudEventService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudEventServiceServer).Unsubscribe(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudEventService_ServiceDesc is the grpc.ServiceDesc for CloudEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CloudEventService",
	HandlerType: (*CloudEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCloudEvent",
			Handler:    _CloudEventService_SendCloudEvent_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _CloudEventService_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _CloudEventService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/cloudevent.proto",
}
